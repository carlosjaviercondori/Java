#BlueJ class context
comment0.target=Bolsa
comment0.text=\ \r\n\ Modela\ la\ bolsa\ que\ utiliza\ el\ Personaje\ para\r\n\ transportar\ elementos.\ La\ capacidad\ se\ determina\ por\r\n\ el\ peso\ maximo\ que\ soporta.\r\n\ \r\n\ Todos\ los\ objetos\ se\ incluyen\ en\ un\ mapa.\r\n
comment1.params=nombre\ peso
comment1.target=Bolsa(java.lang.String,\ int)
comment1.text=\r\n\ Constructor\ con\ par\u00E1metros\r\n\ Inicializa\ las\ variables\ de\ instancia\r\n\ \r\n\ \r\n\ No\ olvidar\ construir\ el\ mapa\ de\ elementos\ (TreeMap),\ ni\r\n\ setear\ el\ peso\ inicial\ de\ la\ bolsa\ \r\n\ \r\n\ \r\n\ @param\ nombre\ El\ nombre\ de\ la\ bolsa.\r\n\ @param\ peso\ El\ peso\ maximo\ que\ puede\ contener\ la\ bolsa\r\n
comment10.params=pesoActual
comment10.target=void\ setPesoActual(int)
comment11.params=
comment11.target=java.lang.String\ getKeySet()
comment12.params=
comment12.target=int\ getPesoMaximo()
comment13.params=
comment13.target=java.lang.String\ getNombre()
comment14.params=
comment14.target=java.util.Map\ getMapaDeElementos()
comment2.params=obj
comment2.target=void\ addElemento(Elemento)
comment2.text=\r\n\ Agrega\ un\ elemento\ a\ la\ bolsa\ y\ actualiza\ el\ peso\ total.\r\n\ \r\n\ Si\ el\ elemento\ no\ puede\ agregarse,\ se\ debe\ imprimir\ el\r\n\ mensaje;\r\n\ \r\n\ \ "<nombre>\:\ No\ se\ puede\ agregar\ <elemento>"\r\n\ \r\n\ donde\ <nombre>\ es\ el\ nombre\ de\ la\ bolsa\ y\ <elemento>\ es\ el\r\n\ nombre\ del\ elemento\ a\ agregar.\r\n\ \r\n\ No\ se\ puede\ agregar\ un\ elemento\ si\ \r\n\ \t\t-\ su\ peso\ excede\ el\ limite\ de\ la\ bolsa\r\n\ \t\t-\ existe\ un\ elemento\ con\ el\ mismo\ nombre\r\n\ \r\n\ @param\ obj\ El\ elemento\ a\ agregar\ en\ la\ bolsa.\r\n
comment3.params=nombre
comment3.target=Elemento\ getElemento(java.lang.String)
comment3.text=\r\n\ Quita\ un\ objeto\ de\ la\ bolsa\ por\ su\ nombre\ y\ actualiza\r\n\ el\ peso\ total.\r\n\ \r\n\ @param\ nombre\ El\ nombre\ del\ elemento\ a\ quitar\ de\ la\ bolsa.\r\n\ @return\ el\ elemento\ eliminado,\ o\ null\ si\ no\ existe\ ese\r\n\ \ \ \ \ \ \ \ \ elemento\ a\ remover\r\n
comment4.params=
comment4.target=java.util.List\ getListaElementosEnLaBolsa()
comment4.text=\r\n\ Devuelve\ una\ lista\ con\ los\ elementos\ almacenados\ en\ la\ bolsa.\r\n\ \r\n\ @return\ List<Elemento>\ lista\ con\ los\ elementos\ de\ la\ bolsa.\r\n
comment5.params=pre
comment5.target=java.util.List\ getElementosConPrefijo(java.lang.String)
comment5.text=\r\n\ Devuelve\ la\ lista\ de\ elementos\ almacenados\ en\ la\ bolsa\r\n\ cuyo\ nombre\ comienza\ con\ el\ prefijo\ indicado.\r\n\ \r\n\ @param\ pre\ El\ prefijo\ a\ buscar\r\n\ @return\ List<Elemento>\ lista\ con\ los\ elementos\ de\ la\ bolsa\ que\ \r\n\ cumplen\ con\ el\ criterio.\r\n
comment6.params=tipo
comment6.target=java.util.List\ getElementosPorTipo(TipoElemento)
comment6.text=\r\n\ Devuelve\ la\ lista\ de\ elementos\ almacenadas\ en\ la\ bolsa\r\n\ segun\ el\ tipo\ indicado.\r\n\ \r\n\ @param\ tipo\ El\ tipo\ de\ elemento\ a\ listar.\r\n\ @return\ List<Elemento>\ lista\ con\ las\ armas\ de\ la\ bolsa.\r\n
comment7.params=
comment7.target=int\ getPesoLibre()
comment7.text=\r\n\ Devuelve\ el\ peso\ disponible\ que\ a\u00FAn\ puede\ almacenarse\ \r\n\ en\ la\ bolsa\ en\ un\ momento\ dado.\ \r\n\ Cambia\ seg\u00FAn\ se\ agregan\ o\ quitan\ objetos.\r\n\ \r\n\ @return\ El\ peso\ m\u00E1ximo\ a\ agregar.\r\n
comment8.params=peso
comment8.target=void\ addPeso(int)
comment8.text=\r\n\ Incrementa\ el\ peso\ total\ almacenado\ en\ la\ bolsa.\r\n\ Se\ utiliza\ para\ agregar\ como\ para\ quitar\ objetos.\r\n\r\n\ \ \ @param\ peso\ El\ peso\ a\ quitar/agregar.\r\n
comment9.params=
comment9.target=int\ getPesoActual()
numComments=15
